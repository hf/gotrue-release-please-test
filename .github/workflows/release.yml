on:
  push:
    branches:
      - master

name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: go

      - run: |
          set -ex

          cat <<EOF
          ${{ toJSON(steps.release.outputs) }}
          EOF

          cat <<EOF
          ${{ steps.release.outputs.pr }}
          EOF

          cat <<EOF
          ${{ steps.release.outputs.pr.title }}
          EOF

          cat <<EOF
          ${{ fromjson(steps.release.outputs.pr).title }}
          EOF

      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        with:
          fetch-depth: 0

      - if: ${{ steps.release.outputs.prs_created == 'true' }}
        run: |
          set -ex

          RELEASE_CANDIDATE=true

          # Release please doesn't tell you the candidate version when it creates the PR, so we have to take it from the title.
          MAIN_RELEASE_VERSION=$(node -e "console.log('${{ fromJSON(steps.release.outputs.pr).title }}'.split(' ').find(x => x.match(/[0-9]+[.][0-9]+[.][0-9]+/)))")

          # Use git describe tags to identify the number of commits the branch is ahead of the most recent tag, which is part of the rc.<commits> value.
          RELEASE_VERSION=$MAIN_RELEASE_VERSION-rc.$(node -e "console.log('$(git describe --tags)'.split('-')[1])")

          echo "MAIN_RELEASE_VERSION=${MAIN_RELEASE_VERSION}" >> "${GITHUB_ENV}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "${GITHUB_ENV}"
          echo "RELEASE_CANDIDATE=${RELEASE_CANDIDATE}" >> "${GITHUB_ENV}"

      - if: ${{ steps.release.outputs.release_created == 'true' }}
        run: |
          set -ex

          RELEASE_CANDIDATE=false

          MAIN_RELEASE_VERISON=${{ steps.release.outputs.tag_name }}
          RELEASE_VERISON=${{ steps.release.outputs.tag_name }}

          echo "MAIN_RELEASE_VERSION=${MAIN_RELEASE_VERSION}" >> "${GITHUB_ENV}"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "${GITHUB_ENV}"
          echo "RELEASE_CANDIDATE=${RELEASE_CANDIDATE}" >> "${GITHUB_ENV}"

      - uses: actions/setup-go@v3
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        with:
          go-version: "^1.21.0" # The Go version to download (if necessary) and use.

      - name: Build release artifacts
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -ex

          make deps
          make all
          ln -s auth gotrue
          tar -czvf auth-v$RELEASE_VERSION-x86.tar.gz auth gotrue migrations/
          mv auth-arm64 auth
          tar -czvf auth-v$RELEASE_VERSION-arm64.tar.gz auth gotrue migrations/

      - name: Upload release artifacts
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          RELEASE_NAME=$RELEASE_VERSION

          if [ "$RELEASE_CANDIDATE" == "true" ]
          then
            gh release create $RELEASE_NAME --prerelease -n 'This is a release candidate. See release-please PR #${{ fromJSON(steps.release.outputs.pr).number }} for changes.'
          fi

          gh release upload $RELEASE_NAME ./auth-v$RELEASE_VERSION-x86.tar.gz ./auth-v$RELEASE_VERSION-arm64.tar.gz

          #publish:
          #  needs:
          #    - releaseplease
          #  if: success() && needs.releaseplease.outputs.release_created
          #  # Call publish explicitly because events from actions cannot trigger more actions
          #  uses: ./.github/workflows/publish.yml
          #  with:
          #    version: v${{ needs.release.outputs.tag_name }}
          #  secrets: inherit
